package test;
/*
 * Test instance
 * //1号城市到5号城市的最短路径
 * input:
5 5
2 3 2
1 2 -3
1 5 5
4 5 2
3 4 3
 * output:
0 1 8 4 13 17 
 */
import java.util.Scanner;

public class Program6_3Bellman_Ford解决负权边 {
	private static Scanner sc;
	private static int[][] e;
	private static final int MAX=9999999;
	private static int n,m;
	private static int[] u,dis,v,w;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		sc=new Scanner(System.in);
		n=sc.nextInt();
		m=sc.nextInt();
		u=new int[n+1];
		v=new int[n+1];
		w=new int[n+1];
		dis=new int[n+1];
		e=new int[n+1][n+1];
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				if(i==j) e[i][j]=0;
				else e[i][j]=MAX;
		for(int i=1;i<=m;i++){
			u[i]=sc.nextInt();
			v[i]=sc.nextInt();
			w[i]=sc.nextInt();
		}
			
		for(int i=1;i<=n;i++)
			dis[i]=MAX;
		//dis[1]=0;
		
		for(int i=1;i<=n;i++)
			System.out.print(dis[i]+" ");
		//Bellman-Ford算法
		for(int k=1;k<n;k++)
			for(int i=1;i<=m;i++)
				if(dis[v[i]]>dis[u[i]]+w[i])
					dis[v[i]]=dis[u[i]]+w[i];
		
		for(int i=1;i<=n;i++)
			System.out.print(dis[i]+" ");
	}

}
